import crypto from "crypto";
import dotenv from "dotenv";

dotenv.config();

const authenticateShopifyWebhook = async (req, res, next) => {
  let apiSecret = "";
  console.log(req.body);
  let data=req.body;
  data=JSON.parse(data.toString('utf8'));
  if (data?.app == "Back In Stock" || (req.originalUrl && req.originalUrl == "/api/stock-update")) {
    apiSecret = process.env.API_SECRET1;
    console.log(apiSecret);
  } else {
    apiSecret = process.env.API_SECRET;
  }
  if (!apiSecret) {
    return res
      .status(500)
      .json({ response: "error", message: "API_SECRET is not set" });
  }

  // 1️⃣ Check for Webhook HMAC header authentication
  const hmacHeader = req.get("X-Shopify-Hmac-Sha256");
  if (hmacHeader) {
    try {
      /*const bodyBuffer = Buffer.isBuffer(req.body)
        ? req.body
        : Buffer.from(
          typeof req.body === "string"
            ? req.body
            : JSON.stringify(req.body),
          "utf8"
        );*/

      const generatedHmac = crypto
        .createHmac("sha256", apiSecret)
        .update(req.body)
        .digest("base64");
      console.log("generatedHmac:" + generatedHmac + " hmacHeader:" + hmacHeader)
      if (generatedHmac === hmacHeader) {
        try {
          req.body = JSON.parse(req.body.toString('utf8'));
        } catch (e) {
          console.error("Failed to re-parse JSON body", e);
          return res.status(400).json({ response: "error", message: "Failed to parse JSON body" });
        }
        return next();
      }

      return res
        .status(401)
        .json({ response: "error", message: "Access denied. Invalid webhook token." });
    } catch (err) {
      console.log("Error validating webhook request.", err)
      return res
        .status(400)
        .json({ response: "error", message: "Error validating webhook request.", error: err });

    }
  }

  if (req.query && req.query.signature) {
    console.log("Req Query:", req.query);
    try {
      const { signature, ...params } = req.query;
      console.log("Params:", params);
      const sorted = Object.keys(params)
        .sort()
        .map((k) => `${k}=${params[k]}`)
        .join("");
      console.log("apiSecret:", apiSecret);
      const digest = crypto
        .createHmac("sha256", apiSecret)
        .update(sorted)
        .digest("hex");
      console.log("digest:", digest + " signature:" + signature)
      if (digest === signature) {
        return next(); // ✅ App proxy authenticated
      }

      return res
        .status(401)
        .json({ response: "error", message: "Access denied. Invalid app proxy signature." });
    } catch (err) {
      return res
        .status(400)
        .json({ response: "error", message: "Error validating app proxy request.", error: err });
    }
  }

  // ❌ Neither webhook HMAC nor app proxy signature was present
  return res
    .status(401)
    .json({ response: "error", message: "Access denied. No valid authentication provided." });
};

export default authenticateShopifyWebhook;
